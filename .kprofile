#!/bin/bash

#/*******************************************************/
#/***** kubernetes environ settings and functions *******/
#/*******************************************************/

      kstat(){ watch kubectl get pods,svc,nodes,rc,rs,pv,pvc --all-namespaces ; }
   kbashcmd(){ NameSpace=${1} ; BashCommand="${2}" ; kubectl exec -it --namespace=${NameSpace} $(kubectl get pods -n ${NameSpace} | grep ${NameSpace} | awk '{print $1}') -- bash -c "${BashCommand}" ; }
    kdelpod(){ kubectl delete pod ${2} -n ${1} --grace-period 0 --force ; }
      kbash(){ K8S_SERVICE_NAME=$( kubectl get pods -n ${1} | grep ${2} | head -1 | awk '{print $1}') ; kubectl exec -it --stdin --tty ${K8S_SERVICE_NAME} -n ${1} -- /bin/bash ;}
    kdelpod(){ kubectl delete pod ${2} -n ${1} --grace-period 0 --force ; }

kbashNodeRoot(){
    # //Source: https://alexei-led.github.io/post/k8s_node_shell/
    node=${1}
    nodeName=$(kubectl get node ${node} -o template --template='{{index .metadata.labels "kubernetes.io/hostname"}}') 
    nodeSelector='"nodeSelector": { "kubernetes.io/hostname": "'${nodeName:?}'" },'
    podName=${USER}-nsenter-${node}

    kubectl run ${podName:?} --restart=Never -it --rm --image overriden --overrides '
    {
      "spec": {
        "hostPID": true,
        "hostNetwork": true,
        '"${nodeSelector?}"'
        "tolerations": [{
            "operator": "Exists"
        }],
        "containers": [
          {
            "name": "nsenter",
            "image": "alexeiled/nsenter:2.34",
            "command": [
              "/nsenter", "--all", "--target=1", "--", "su", "-"
            ],
            "stdin": true,
            "tty": true,
            "securityContext": {
              "privileged": true
            }
          }
        ]
      }
    }' --attach "$@"
}

#/*******************************************************/
#/***** Jenkins/kubernetes functions              *******/
#/*******************************************************/

kcr8jenkins(){
  cd ~/.kube/jenkins
  kubectl create -f jenkins-namespace.yaml
  kubectl apply -f jenkins-role.yml
  kubectl apply -f jenkins-role-bind.yml
  kubectl create serviceaccount jenkins-admin-sa -n jenkins
  kubectl create clusterrolebinding jenkins-admin-sa --clusterrole=cluster-admin --serviceaccount=jenkins:jenkins-admin-sa -n jenkins

  kubectl create -f create-pv-jenkins.yaml
  kubectl create -f create-pv-claim-jenkins.yaml
  kubectl create -f jenkins-deployment.yaml
  kubectl create -f jenkins-service.yaml --validate=false
  kubectl create -f jenkins-service-jnlp.yaml
  kubectl scale -n jenkins deployment jenkins --replicas=1
}

kdeljenkins(){
  kubectl delete namespace jenkins
  kubectl delete persistentvolume pv-volume-jenkins
  kubectl delete persistentvolume pv-volume-jenkins
  kubectl delete clusterrolebinding jenkins-admin-sa
}

kgetloginJenkins(){
        K8S_MASTER_IP=$(kubectl get nodes -o wide | grep master | awk '{ print $6 }' ;) 
    JENKINS_NODE_PORT=$(kubectl get services --namespace jenkins | grep 'NodePort' | awk '{print $5}' | sed -e 's|\/|:|g' | awk -F':' '{print $2}' ; )
     K8S_SERVICE_NAME=$(kubectl get pods -n jenkins | grep jenkins | head -1 | awk '{print $1}' ; )
  JENKINS_INIT_PASSWD=$(kubectl exec ${K8S_SERVICE_NAME} -n jenkins -- cat /var/jenkins_home/secrets/initialAdminPassword)

    cat <<EOF
    http://${K8S_MASTER_IP}:${JENKINS_NODE_PORT}
    ${JENKINS_INIT_PASSWD}
EOF
}

kgetsecJenkins(){
  kubectl auth can-i list pods --namespace jenkins --as jenkins-admin-sa
  kubectl get serviceaccounts -n jenkins
  kubectl get roles -n jenkins -o wide
  kubectl get rolebindings -n jenkins
  kubectl get serviceaccounts/jenkins-admin-sa -o yaml -n jenkins
  kubectl cluster-info
}

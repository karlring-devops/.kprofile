#!/bin/bash


      kflist(){ grep '(){'  ~/.kprofile/.kprofile | sed -e 's/(){/^/g' | cut -d'^' -f1 | sed -e 's/ //g' | sort -u ; }
      
#/*******************************************************/
#/***** kubernetes environ settings and functions *******/
#/*******************************************************/

      kstat(){ watch kubectl get pods,svc,nodes,rc,rs,pv,pvc,sts,ds --all-namespaces ; }
     kstatw(){ watch kubectl get pods,svc,nodes,rc,rs,pv,pvc,sts,ds --all-namespaces -o wide ; }
   kbashcmd(){ NameSpace=${1} ; BashCommand="${2}" ; kubectl exec -it --namespace=${NameSpace} $(kubectl get pods -n ${NameSpace} | grep ${NameSpace} | awk '{print $1}') -- bash -c "${BashCommand}" ; }
    kdelpod(){ kubectl delete pod ${2} -n ${1} --grace-period 0 --force ; }
      kbash(){ K8S_SERVICE_NAME=$( kubectl get pods -n ${1} | grep ${2} | head -1 | awk '{print $1}') ; kubectl exec -it --stdin --tty ${K8S_SERVICE_NAME} -n ${1} -- /bin/bash ;}
    kdelpod(){ kubectl delete pod ${2} -n ${1} --grace-period 0 --force ; }

kdelobjs(){  #--- <object_type:pods,svc,nodes,rc,rs,pv,pvc,sts> <namespace> <REXGEX> 
	K8S_OBJECT_NAMES=$(kubectl get ${1} -n ${2} | grep ${3} | head -1 | awk '{print $1}' ; )
  for k in ${K8S_OBJECT_NAMES}
  do
  	kubectl delete -n ${2} ${1} ${k} --grace-period 0 --force
  done
}

kdashsetup(){
  cd
  mkdir -p .devops/
  cd .devops/
  rm -rf kubernetes-dashboard
  git clone https://github.com/karlring-devops/kubernetes-dashboard.git
  cd kubernetes-dashboard
  . ./setup_k8s_dashboard.sh
}

kmsghead(){
	KMSG_KLINES='--------------'
cat <<EOF
 ${KMSG_KLINES}
 ${1}
 ${KMSG_KLINES} 
EOF
}

kstata(){
	runtime="5 minute"
	endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
	clear
	kmsghead Pods
	kubectl get pods --all-namespaces -o wide
	kmsghead Services
	kubectl get svc
	kmsghead Nodes
	kubectl get nodes -o wide
	kmsghead "Replica Sets"
	kubectl get rs --all-namespaces
	kmsghead "Persistent Volumnes"
	kubectl get pv -o wide
	kmsghead "Persistent Volumne Claims"
	kubectl get pvc
	kmsghead "Stateful Sets"
	kubectl get sts --all-namespaces -o wide
	sleep 20
done
}

ksetKubeConf(){
    mkdir -p /home/$USER/.kube
    cp -f /etc/kubernetes/admin.conf /home/$USER/.kube/config
    chown $USER:$USER /home/$USER/.kube/config

    # - name: Setup kubeconfig for user
    #   become: no
    #   command: "{{ item }}"
    #   with_items:
    #     - mkdir -p /home/$USER/.kube
    #     - sudo cp -i /etc/kubernetes/admin.conf /home/$USER/.kube/config
    #     - sudo chown $USER:$USER /home/$USER/.kube/config
}


kdashboard(){
#-- Get Dashboard Login Details --#
DashboardPort=$(
    sudo kubectl get svc  -l k8s-app=kubernetes-dashboard -n kubernetes-dashboard \
    | grep 'kubernetes-dashboard' \
    | awk '{print $5}' \
    | sed -e 's|\/|:|g' \
    | awk -F':' '{print $2}' 
    )

MasterIp=$(
    sudo kubectl get nodes -o wide | grep master | awk '{ print $6 }'
    )

LoginToken=$(
    sudo kubectl describe secret \
        $(sudo kubectl get secrets | awk '{print $1}'| grep dashboard-admin-sa-token) \
      | grep token \
      | egrep -v 'Name|Type' \
      | sed -e "s/  /\\n/" \
      | grep -v token \
      | sed 's/^ *//g'
      )

cat <<EOF
/**************************************/
/** Dashboard Login Details:         **/
/--------------------------------------/

https://${MasterIp}:${DashboardPort}

Token:

${LoginToken}

EOF
#---------------------------------------------#
}


kbashNodeRoot(){
    # //Source: https://alexei-led.github.io/post/k8s_node_shell/
    node=${1}
    nodeName=$(kubectl get node ${node} -o template --template='{{index .metadata.labels "kubernetes.io/hostname"}}') 
    nodeSelector='"nodeSelector": { "kubernetes.io/hostname": "'${nodeName:?}'" },'
    podName=${USER}-nsenter-${node}

    kubectl run ${podName:?} --restart=Never -it --rm --image overriden --overrides '
    {
      "spec": {
        "hostPID": true,
        "hostNetwork": true,
        '"${nodeSelector?}"'
        "tolerations": [{
            "operator": "Exists"
        }],
        "containers": [
          {
            "name": "nsenter",
            "image": "alexeiled/nsenter:2.34",
            "command": [
              "/nsenter", "--all", "--target=1", "--", "su", "-"
            ],
            "stdin": true,
            "tty": true,
            "securityContext": {
              "privileged": true
            }
          }
        ]
      }
    }' --attach "$@"
}

kdash(){
#-- Get Dashboard Login Details --#
DashboardPort=$(
    sudo kubectl get svc  -l k8s-app=kubernetes-dashboard -n kubernetes-dashboard \
    | grep 'kubernetes-dashboard' \
    | awk '{print $5}' \
    | sed -e 's|\/|:|g' \
    | awk -F':' '{print $2}' 
    )

MasterIp=$(
    sudo kubectl get nodes -o wide | grep master | awk '{ print $6 }'
    )

LoginToken=$(
    sudo kubectl describe secret \
        $(sudo kubectl get secrets | awk '{print $1}'| grep dashboard-admin-sa-token) \
      | grep token \
      | egrep -v 'Name|Type' \
      | sed -e "s/  /\\n/" \
      | grep -v token \
      | sed 's/^ *//g'
      )

cat <<EOF
/**************************************/
/** Dashboard Login Details:         **/
/--------------------------------------/

https://${MasterIp}:${DashboardPort}

Token:

${LoginToken}

EOF
}

